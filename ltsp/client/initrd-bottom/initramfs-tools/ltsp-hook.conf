# /bin/sh -n
# This file is part of LTSP, https://ltsp.org
# Copyright 2019 the LTSP team, see AUTHORS
# SPDX-License-Identifier: GPL-3.0-or-later

# Inject LTSP code under initramfs-tools

# Sourced by initramfs-tools init before any other scripts. Specifically:
# /conf/conf.d/*, /scripts/functions, /proc/cmdline, break:top,
# /scripts/init-top, break:modules, break:premount, /scripts/init-premount,
# break:mount, /scripts/local, /scripts/nfs, break:mountroot,
# /scripts/local-top, /scripts/local-premount, mountroot, /scripts/nfs-bottom,
# /scripts/local-bottom, break:bottom, /scripts/init-bottom, mount move run,
# break:init, run-init.
# Another way to hook would be rdinit=.

# Notes:
# It needs the .conf extension, it can't be .sh.
# Don't exit from here! It's sourced! (bad shebang is for gedit highlighting)
# Use functions and local variables, to avoid namespace pollution

debug_shell() {
    echo "Spawning a shell at '$0 $*', type exit to continue:" >&2
    sh -i </dev/console >/dev/console 2>&1
}

# Work around https://github.com/NetworkBlockDevice/nbd/issues/87
# Additionally, blockdev may be needed when nbd is not a single partition
patch_nbd() {
    # Live code patching is ugly, but there's no easy alternative in this case.
    # At least try to match the whole line, to only patch affected versions.
    if grep -qs 'systemd-mark$' /scripts/local-top/nbd; then
        sed 's/^$NBDCLIENT $nbdsrv -N $nbdpath $nbdport $nbdrootdev -swap -persist -systemd-mark$/& -b 512; blockdev --rereadpt $nbdrootdev/' -i /scripts/local-top/nbd
    fi
}

# Work around https://bugs.launchpad.net/ubuntu/+source/systemd/+bug/1755863
patch_casper() {
    if [ -d /scripts/casper-bottom ]; then
        echo 'ln -s /dev/null /root/lib/systemd/system/cdrom.mount' \
            > /scripts/casper-bottom/25disable_cdrom.mount
        chmod +x /scripts/casper-bottom/25disable_cdrom.mount
    fi
    # This was added in eoan and hardcodes BOOT=casper
    rm -f /conf/conf.d/default-boot-to-casper.conf
}

# Work around https://bugs.launchpad.net/ubuntu/+source/isc-dhcp/+bug/1840965
patch_dhclient() {
    if [ -x /etc/ltsp/dhclient-config ] &&
        [ -d /etc/dhcp/dhclient-enter-hooks.d ]
    then
        cp -a /etc/ltsp/dhclient-config /etc/dhcp/dhclient-enter-hooks.d/config
    fi
}

install_ltsp_hooks() {
    local script entry order

    # If an LTSP5 boot was requested, return
    grep -qs "init=/sbin/init-ltsp" /proc/cmdline && return 0
    # If a casper boot was requested, return
    grep -qs "boot=casper" /proc/cmdline && return 0
    # If a LTSP image over HTTP was requested, set ltsp-http boot method
    grep -qs 'ltsp.image=\(http\|https\|ftp\):' /proc/cmdline && export BOOT=ltsp-http

    # Neutralize all LTSP5 scripts to prevent them from interfering.
    # Symlinking to /bin/true won't work since that's a symlink to busybox.
    # Removing their entries from ORDER is hard, so don't use rm either.
    for script in /scripts/*/*ltsp*; do
        test -f "$script" || continue
        echo '#!/bin/true' > "$script"
    done

    # Initramfs-tools run_scripts() sources /scripts/*/ORDER, which in turn
    # runs the scripts and reads possible output from /conf/param.conf.
    # Hook our scripts at the end of each ORDER, except for init-bottom.
    # E.g. ltsp-bottom in Ubuntu needs to run before udev moves /dev to /root/dev.
    for script in /scripts/init-bottom/ltsp-initrd-bottom; do
        mkdir -p "${script%/*}"
        # In buster+ (contrary to bionic-), /run isn't yet mounted at this
        # point, so we can't mkdir /run/ltsp/client now. So inject it below.
        echo "#!/bin/sh
mkdir -p /run/ltsp/client
ltsp ${script#*ltsp-}" > "$script"
        chmod +x "$script"
        entry=$(printf "%s %s" "$script" '"$@"
[ -e /conf/param.conf ] && . /conf/param.conf')
        if [ "$script" != "${script#/scripts/init-bottom/}" ]; then
            if [ -f "${script%/*}/ORDER" ]; then
                order=$(cat "${script%/*}/ORDER")
            else
                order=""
            fi
            printf "%s\n%s\n" "$entry" "$order" >"${script%/*}/ORDER"
        else
            printf "%s\n" "$entry" >>"${script%/*}/ORDER"
        fi
    done
    # Create the ltsp binary symlink
    mkdir -p /usr/sbin
    ln -s ../share/ltsp/ltsp /usr/sbin/ltsp

    # Don't search for a resume device
    rm -f /conf/conf.d/*resume*
    # TODO: these belong in a new `ltsp initrd-top` applet
    # Empty fstab; don't erase it as dhclient-script complains
    echo "# Generated by \`ltsp initrd-top\`, see man:ltsp(8)" > /etc/fstab
    # TODO: to fsck or not to fsck? If it doesn't fsck read-only netmounts,
    # then it's best to leave the defaults, so that it checks local disks.
    # E.g. local disk that needs to be used as ltsphome, AND that has our rootfs.
    # export fastboot=y
    case " ${BLACKLIST_MODULES-floppy} " in
        *" floppy "*)
            mkdir -p /etc/modprobe.d
            echo "# Generated by \`ltsp initrd-top\`, see man:ltsp(8)
# Blacklist floppy (#32)
blacklist floppy" >/etc/modprobe.d/ltsp.conf
            ;;
    esac
}

patch_nbd
patch_casper
patch_dhclient
install_ltsp_hooks
unset patch_nbd
unset patch_casper
unset patch_dhclient
unset install_ltsp_hooks
unset debug_shell
